sudo docker-compose up -d server php mysql
sudo docker-compose up -d --build server

docker-compose  run --rm composer create-project laravel/laravel .

https://www.udemy.com/course/docker-kubernetes-the-practical-guide/learn/lecture/23172898#questions/13086284


Hi!

And are you also getting this when sticking to your original project (after fixing that context problem)?

This seems to be a bug with docker-compose unfortunately: https://github.com/docker/for-win/issues/2918

It's not clear to my why this old bug still exists but I also was able to reproduce this on Windows with WSL2 (not always though - which makes this even stranger).

If you're on Windows 10 Pro, you could try removing WSL2 and using Hyper-V instead.

Otherwise, unfortunately, the only workaround I found was to execute the Docker commands individually - i.e. without docker-compose:

docker network create laravel-net
 
docker build -f dockerfiles/php.dockerfile -t php-image .
 
docker build -f dockerfiles/nginx.dockerfile -t nginx-image .
 
docker run --name php -d --rm -v %cd%\src:/var/www/html --net laravel-net php-image
 
docker run --name mysql --env-file env/mysql.env -d --rm --net laravel-net mysql:5.7
 
docker run --name server -d --rm -p 8000:80 -v %cd%\src:/var/www/html -v %cd%\nginx\nginx.conf:/etc/nginx/conf.d/default.conf:ro --net laravel-net nginx-image
This should replicate all the steps performed by docker-compose - with just the Docker command. It's definitely less convenient but works around that annoying docker-compose bug.

Max